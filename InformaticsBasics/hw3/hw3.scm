(define (derivative expr)
  (cond ((not (list? expr)) (if (number? expr) 0 1))
        ((= (length expr) 1) (if (number? (car expr)) 0 1))
        (else
         (let ((sign (car expr))
               (arg1 (cadr expr))
               (arg2 (if (= (length expr) 3) (caddr expr))))
           (cond
             ((and (equal? '+ sign) (= 2 (length expr))) (derivative arg1))
             ((equal? '+ sign) (list '+ (derivative arg1) (derivative arg2)))
             ((and (equal? '- sign) (= 2 (length expr))) (list '* -1 (derivative arg1)))
             ((equal? '- sign) (list '- (derivative arg1) (derivative arg2)))
             ((and (equal? '* sign) (= (length expr) 3))
              (list '+ (list '* (derivative arg1) arg2) (list '* arg1 (derivative arg2))))
             ((equal? '* sign)
              (list '+ (list '* (derivative arg1) (cons '* (cddr expr)))
                    (list '* arg1 (derivative (cons '* (cddr expr))))))
             ((and (equal? '/ sign) (= (length expr) 3))
              (list '/ (list '- (list '* (derivative arg1) arg2) (list '* arg1 (derivative arg2)))
                    (list 'expt arg2 '2)))
             ((and (equal? 'expt sign) (not (number? arg1)))
              (list '* arg2 (list 'expt arg1 (- arg2 1))))
             ((equal? 'expt sign) (list '* (list 'log arg1) expr (derivative arg2)))
             ((equal? 'exp sign)  (list '* expr (derivative arg1)))
             ((equal? 'log sign)  (list '* (list '/ 1 arg1) (derivative arg1)))
             ((equal? 'sin sign)  (list '* (derivative arg1) (list 'cos arg1)))
             ((equal? 'cos sign)  (list '* (derivative arg1) (list '- (list 'sin arg1))))
             (else expr))))))