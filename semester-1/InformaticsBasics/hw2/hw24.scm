(define (merge-sort less? xs)
  (define (merge-lists less? xs ys)
    (cond ((null? ys) xs)
          ((null? xs) ys)
          ((not (less? (car ys) (car xs))) (cons (car xs) (merge-lists less? (cdr xs) ys)))
          (else (cons (car ys) (merge-lists less? xs (cdr ys))))))
  (define (iter less? xxs)
    (define (merge xxxs)
      (cond ((null? xxxs) '())
            ((null? (cdr xxxs)) (list (car xxxs)))
            (else (cons (merge-lists less? (car xxxs) (cadr xxxs)) (merge (cddr xxxs))))))
    (let ((result (merge xxs)))
      (cond ((null? result) '())
            ((= (length result) 1) (car result))
            (else (iter less? result)))))
  (iter less? (map (lambda (x) (list x)) xs))) 